name: PathFinder Pro CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Allow manual workflow dispatch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  CACHE_KEY_PREFIX: 'pathfinder-v1'

jobs:
  # Security and Code Quality Checks
  security:
    runs-on: ubuntu-latest
    name: Security & Code Quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for vulnerabilities
        run: |
          npx audit-ci --config audit-ci.json
        continue-on-error: true
        
      - name: TypeScript type checking
        run: npm run type-check
        
      - name: Check bundle size
        run: npm run analyze:bundle
        continue-on-error: true

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    needs: [security]
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test:${{ matrix.test-type }}
        env:
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            
      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info

  # Performance and Accessibility Testing
  performance:
    runs-on: ubuntu-latest
    name: Performance & Accessibility
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          CI: true
          GENERATE_SOURCEMAP: false
          
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: PWA Validation
        run: |
          npx pwa-asset-generator --scrape false --log false ./build
          
  # Build for different environments
  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: [security, test]
    
    strategy:
      matrix:
        environment: [staging, production]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure environment
        run: |
          if [ "${{ matrix.environment }}" = "production" ]; then
            cp .env.production .env
          else
            cp .env.staging .env
          fi
        
      - name: Build application
        run: npm run build
        env:
          CI: true
          REACT_APP_ENV: ${{ matrix.environment }}
          REACT_APP_VERSION: ${{ github.sha }}
          REACT_APP_BUILD_DATE: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
      - name: Optimize build
        run: |
          # Gzip compression
          find build -name "*.js" -o -name "*.css" -o -name "*.html" | xargs gzip -k -9
          
          # Generate build report
          npm run analyze:build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: build/
          retention-days: 30

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-staging
          path: build/
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy to S3
        run: |
          aws s3 sync build/ s3://${{ secrets.S3_BUCKET_STAGING }} --delete --cache-control max-age=31536000
          
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_STAGING }} --paths "/*"
          
      - name: Update deployment status
        run: |
          echo "Staging deployment completed at $(date)"
          echo "URL: https://staging.pathfinderpro.com"

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build, performance]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: build/
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy to S3
        run: |
          aws s3 sync build/ s3://${{ secrets.S3_BUCKET_PRODUCTION }} --delete --cache-control max-age=31536000
          
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_PRODUCTION }} --paths "/*"
          
      - name: Health check
        run: |
          sleep 60  # Wait for deployment to propagate
          curl -f https://pathfinderpro.com/health || exit 1
          
      - name: Create GitHub release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated deployment from commit ${{ github.sha }}
            - Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ## Deployment
            - Production: https://pathfinderpro.com
            - Documentation: https://docs.pathfinderpro.com
          draft: false
          prerelease: false

  # Post-deployment monitoring and notifications
  monitor:
    runs-on: ubuntu-latest
    name: Post-deployment Monitoring
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Run health checks
        run: |
          # Check staging if deployed
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            curl -f https://staging.pathfinderpro.com/health
            echo "Staging health check passed"
          fi
          
          # Check production if deployed
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            curl -f https://pathfinderpro.com/health
            echo "Production health check passed"
          fi
          
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: |
            {
              "repo": true,
              "message": true,
              "commit": true,
              "author": true,
              "action": true,
              "eventName": true,
              "ref": true,
              "workflow": true,
              "job": true,
              "took": true
            }

  # Cleanup old artifacts
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Keep only the latest 10 artifacts
            const oldArtifacts = artifacts.data.artifacts
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(10);
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }